module Script.Factoring.Setup where

import Marketplace.Custodian
import Marketplace.Exchange
import Marketplace.Issuer
import Marketplace.Operator
import Marketplace.Token
import Marketplace.Transfer
import Marketplace.Utils hiding (BrokerRole)
import qualified Marketplace.Utils as MU

import Factoring.Broker
import Factoring.Buyer
import Factoring.Onboarding
import Factoring.Utils

import Script.Factoring

import DA.Finance.Asset
import DA.Foldable (forA_)
import DA.Finance.Types
import DA.Next.Set

import Daml.Script

testSetupScript : Script ()
testSetupScript = allocatePartiesNoHint >>= doSetupFactoring False

setupFactoring : Script ()
setupFactoring = allocateParties >>= doSetupFactoring False

setupMarket : Script ()
setupMarket = allocateParties >>= doSetupMarket False

doSetupMarket : Bool -> LedgerParties -> Script ()
doSetupMarket wt lp@(LedgerParties operator public csd buyer1 buyer2 seller1 seller2 exchange broker) = do
  let email   = "default@email.com"
      company  = "default company "
      lastName = "lastname"

  factoringOperatorCid <- operator `submit` createCmd FactoringOperator with operator = operator, exchange, csd, public
  operator `submit` exerciseCmd factoringOperatorCid FactoringOperator_SetupMarket with
    sellers = [seller1, seller2]
    buyers  = [buyer1, buyer2]
    brokers = [broker]

  forA_ [seller1, seller2] $ \s -> do
    s `submit` exerciseByKeyCmd @SellerInvitation (operator, s) SellerInvitation_Accept with
        firstName = "seller", lastName = "the seller", optBroker = None, isPublic = True, optTest = None, ..

  forA_ [buyer1, buyer2] $ \b -> do
    b `submit` exerciseByKeyCmd @BuyerInvitation (operator, b) BuyerInvitation_Accept with
        firstName = "buyer", lastName = "the buyer", optBroker = None, isPublic = True, ..

  broker `submit` exerciseByKeyCmd @BrokerInvitation (operator, broker) BrokerInvitation_Accept with
      firstName = "Broker", lastName = "Brokerson", isPublic = True, ..

  return ()

doSetupFactoring : Bool -> LedgerParties -> Script ()
doSetupFactoring wt lp@(LedgerParties operator public csd buyer1 buyer2 seller1 seller2 exchange broker) = do

  let observers = [csd, public, exchange, seller1, seller2, buyer1, buyer2, broker]

  -- | Onboard and create relationships
  debug "onboarding and creating relationships..."

  handleOnboarding wt lp
  awaitOrDo' wt 0.25 "adding observers to token"
    $ csd `submit` exerciseByKeyCmd @Token (getTokenId csd "USD") Token_AddObservers
      with party = csd, newObservers = fromList observers

  -- Setup Buyer2 accounts
  ----------------------------

  exchDepositReqCid <- buyer1 `submit` exerciseByKeyCmd @Buyer (operator, buyer1) Buyer_RequestDeposit
      with amount = 10_000_000.0
  awaitOrDo' wt 0.25 "accept buyer 1" $ csd `submit` exerciseCmd exchDepositReqCid CreateExchangeDepositRequest_Accept

  exchDepositReqCid <- buyer2 `submit` exerciseByKeyCmd @Buyer (operator, buyer2) Buyer_RequestDeposit
      with amount = 10_000_000.0
  awaitOrDo' wt 0.25 "accept buyer 2 req" $  csd `submit` exerciseCmd exchDepositReqCid CreateExchangeDepositRequest_Accept


  return ()

handleOnboarding : Bool -> LedgerParties -> Script ()
handleOnboarding wt lp@(LedgerParties operator public csd buyer1 buyer2 seller1 seller2 exchange broker) = do
  let name = "default name"
      title = "default title"
      issuerID = "default issuerID"
      location = "default location"
      email = "default@email.com"
      company = "default company"
      lastName = "lastname"

  operator `submit` createCmd Operator with operator = operator, public
  factoringOperatorCid <- operator `submit` createCmd FactoringOperator with operator = operator, csd, exchange, public

  -- > Onboard CSD
  csdInvitationCid <- operator `submit` exerciseCmd factoringOperatorCid FactoringOperator_OnboardCSD
  awaitOrDo' wt 0.25 "accept CSD invitation"
    $ csd `submit` exerciseCmd csdInvitationCid CSDInvitation_Accept with name = "CSD", location = ""

  --- > Onboard Exchange
  exchangeInvCid <- operator `submit` exerciseCmd factoringOperatorCid FactoringOperator_OnboardExchange
  awaitOrDo' wt 0.25 "accept exchange invitation"
    $ exchange `submit` exerciseCmd exchangeInvCid FactoringExchangeInvitation_Accept with name = "Exchange", location = ""

  awaitOrDo' wt 0.25 "accept invitation requests"
    $ exchange `submit` exerciseByKeyCmd @ExchangeParticipantInvitationRequest (operator, exchange, csd) ExchangeParticipantInvitationRequest_Accept

  -- > Onboard Buyers
  buyerRequestInvitationCid <- buyer1 `submit` createCmd InvitationRequest with
      user = buyer1, role = BuyerRole, firstName = "Buyer 1", optBroker = None
      operator, lastName, email, company
  awaitOrDo' wt 0.25 "accept buyer1 invitation"
    $ operator `submit` exerciseCmd buyerRequestInvitationCid InvitationRequest_Accept

  buyerRequestInvitationCid <- buyer2 `submit` createCmd InvitationRequest with
      user = buyer2, role = BuyerRole, firstName = "Buyer 2", optBroker = None
      operator, lastName, email, company
  awaitOrDo' wt 0.25 "accept buyer2 invitation"
    $ operator `submit` exerciseCmd buyerRequestInvitationCid InvitationRequest_Accept

  sellerRequestInvitationCid <- seller1 `submit` createCmd InvitationRequest with
      user = seller1, role = SellerRole, firstName = "Seller 1", optBroker = None
      operator, lastName, email, company
  awaitOrDo' wt 0.25 "accept seller1 invitation"
    $ operator `submit` exerciseCmd sellerRequestInvitationCid InvitationRequest_Accept

  sellerRequestInvitationCid <- seller2 `submit` createCmd InvitationRequest with
      user = seller2, role = SellerRole, firstName = "Seller 2", optBroker = None
      operator, lastName, email, company
  awaitOrDo' wt 0.25 "accept seller2 invitation"
    $ operator `submit` exerciseCmd sellerRequestInvitationCid InvitationRequest_Accept

  awaitOrDo' wt 0.25 "accept buyer relationship requests"
    $  acceptRelationshipRequests lp buyer1
    >> acceptRelationshipRequests lp buyer2

  -- TODO: Add this to onboarding?
  awaitOrDo' wt 0.25 "accept seller relationship requests"
    $  acceptRelationshipRequests lp seller1
    >> acceptRelationshipRequests lp seller2

  onboardBroker wt lp broker

  return ()

useOperatorInvite : Bool -> LedgerParties -> Script ()
useOperatorInvite wt lp@LedgerParties{..} = do
  let operator = userAdmin
  let name = "default name"
      title = "default title"
      issuerID = "default issuerID"
      location = "default location"
      email = "default@email.com"
      company = "default company"
      lastName = "lastname"

  -- onboard buyers
  buyerInviteCid <- operator `submit` exerciseByKeyCmd @FactoringOperator operator FactoringOperator_OnboardBuyer with
        buyer = buyer1
  buyer1 `submit` exerciseCmd buyerInviteCid BuyerInvitation_Accept with
      firstName = "Buyer 1", isPublic = True, optBroker = None, ..

  buyerInviteCid <- operator `submit` exerciseByKeyCmd @FactoringOperator operator FactoringOperator_OnboardBuyer with
        buyer = buyer2
  buyer2 `submit` exerciseCmd buyerInviteCid BuyerInvitation_Accept with
      firstName = "Buyer 2", isPublic = True, optBroker = None, ..

  awaitOrDo' wt 0.25 "accept buyer relationship requests"
    $  acceptRelationshipRequests lp buyer1
    >> acceptRelationshipRequests lp buyer2

  -- > Onboard Sellers
  sellerInviteCid <- operator `submit` exerciseByKeyCmd @FactoringOperator operator FactoringOperator_OnboardSeller with
        seller = seller1
  seller1 `submit` exerciseCmd sellerInviteCid SellerInvitation_Accept with
      firstName = "Seller 1", isPublic = True, optBroker = None, optTest = None, ..

  sellerInviteCid <- operator `submit` exerciseByKeyCmd @FactoringOperator operator FactoringOperator_OnboardSeller with
        seller = seller2
  seller2 `submit` exerciseCmd sellerInviteCid SellerInvitation_Accept with
      firstName = "Seller 2", isPublic = True, optBroker = None, optTest = None, ..

  -- TODO: Add this to onboarding?
  awaitOrDo' wt 0.25 "accept seller relationship requests"
    $  acceptRelationshipRequests lp seller1
    >> acceptRelationshipRequests lp seller2


onboardBroker : Bool -> LedgerParties -> Party -> Script ()
onboardBroker wt lp broker = do
  let operator = lp.userAdmin
      csd      = lp.csd
      exchange = lp.exchange
      public   = lp.public
      seller1  = lp.seller1
      seller2  = lp.seller2
      buyer1  = lp.buyer1
      buyer2  = lp.buyer2

  brokerInvitationCid <- operator `submit` exerciseByKeyCmd @FactoringOperator operator FactoringOperator_OnboardBroker with ..
  brokerCid <- broker `submit` exerciseCmd brokerInvitationCid BrokerInvitation_Accept with
    firstName = "Broker", lastName = "Brokerson", company = "Brokerage", email = "broker@brokerage", isPublic = True

  -- establish relationship with custodian
  awaitOrDo' wt 0.25 "accept custodian relationship"
    $ csd `submit` exerciseByKeyCmd @CustodianRelationshipRequest (operator,broker,csd,MU.InvestorRole) CustodianRelationshipRequest_Approve

  -- become exchange participant
  awaitOrDo' wt 0.25 "accept exchange participant request"
    $ exchange `submit` exerciseByKeyCmd @ExchangeParticipantInvitationRequest (operator,exchange,broker)
        ExchangeParticipantInvitationRequest_Accept

  -- invite customers
  seller1InviteCid <- broker `submit` createCmd BrokerCustomerInvitation with operator, broker, brokerCustomer = seller1, isBuyer = False
  seller2InviteCid <- broker `submit` createCmd BrokerCustomerInvitation with operator, broker, brokerCustomer = seller2, isBuyer = False

  seller1 `submit` exerciseCmd seller1InviteCid BrokerCustomerInvitation_Accept
  seller2 `submit` exerciseCmd seller2InviteCid BrokerCustomerInvitation_Accept

  buyer1InviteCid <- broker `submit` createCmd BrokerCustomerInvitation with operator, broker, brokerCustomer = buyer1, isBuyer = True
  buyer2InviteCid <- broker `submit` createCmd BrokerCustomerInvitation with operator, broker, brokerCustomer = buyer2, isBuyer = True

  buyer1 `submit` exerciseCmd buyer1InviteCid BrokerCustomerInvitation_Accept
  buyer2 `submit` exerciseCmd buyer2InviteCid BrokerCustomerInvitation_Accept

  exchDepositReqCid <- broker `submit` exerciseByKeyCmd @Broker (operator, broker) Broker_RequestDeposit
      with amount = 10_000_000.0

  awaitOrDo' wt 0.25 "accept buyer 1" $ csd `submit` exerciseCmd exchDepositReqCid CreateExchangeDepositRequest_Accept

  transferFundsToBroker lp buyer1 500_000.0
  transferFundsToBroker lp buyer2 500_000.0

  return ()

acceptRelationshipRequests : LedgerParties -> Party -> Script ()
acceptRelationshipRequests lp investor = do
  let operator = lp.userAdmin
      csd      = lp.csd
      exchange = lp.exchange

  csd `submit` exerciseByKeyCmd @CustodianRelationshipRequest (operator,investor,csd,InvestorRole) CustodianRelationshipRequest_Approve
  exchange `submit` exerciseByKeyCmd @ExchangeParticipantInvitationRequest (operator, exchange, investor) ExchangeParticipantInvitationRequest_Accept
  return ()

-- establishInvestorRelationships : LedgerParties -> Party -> Script ()
-- establishInvestorRelationships lp investor = do
--
--   let operator = lp.userAdmin
--       csd      = lp.csd
--       exchange = lp.exchange
--
--   (Some (investorCid,_)) <- queryContractKey @Investor investor (operator,investor)
--
--   -- establish relationship with custodian
--   relationshipRequestCid <- investor `submit` exerciseCmd investorCid Investor_RequestCustodianRelationship with custodian = csd, ..
--   csd `submit` exerciseCmd relationshipRequestCid CustodianRelationshipRequest_Approve
--
--   -- -- become exchange participant
--   exchInviteRequestCid <- investor `submit` exerciseByKeyCmd @Investor (operator,investor) Investor_RequestExchangeParticipantInvitation with exchange
--   exchange `submit` exerciseCmd exchInviteRequestCid ExchangeParticipantInvitationRequest_Accept
--
--   return ()
--

createToken : Party -> Party -> Text -> Text -> Int -> [Party] -> Script Id
createToken operator issuer name description quantityPrecision observers = do
  issuer `submit` exerciseByKeyCmd @Issuer (operator, issuer) Issuer_IssueToken with name, description, quantityPrecision, isPublic = True, observers
  return $ Id with signatories = fromList [ issuer ], label = name, version = 0

getTokenId : Party -> Text -> Id
getTokenId issuer name = Id with signatories = fromList [issuer], label = name, version = 0

transferFundsToBroker
  : LedgerParties
  -> Party
  -> Decimal
  -> Script (ContractId AssetDeposit)
transferFundsToBroker LedgerParties{userAdmin = operator, exchange, csd, broker} buyer amount = do
  let newAmount = amount
  exchDepositReqCid <- buyer `submit` exerciseByKeyCmd @Buyer (operator, buyer) Buyer_RequestDeposit with amount = newAmount, ..
  depositCid <- csd `submit` exerciseCmd exchDepositReqCid CreateExchangeDepositRequest_Accept
  (depositTransferRequestCid,_) <- buyer `submit` exerciseByKeyCmd @BrokerCustomerBuyer (broker, buyer) BrokerCustomerBuyer_TransferToBroker
      with depositCids = [depositCid], transferQuantity = amount, ..
  csd `submit` exerciseCmd depositTransferRequestCid DepositTransferRequest_Approve

